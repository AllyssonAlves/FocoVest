#!/bin/bash

# FocoVest Deploy Script
# Este script automatiza o processo de deploy da aplica√ß√£o

set -e  # Parar em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

# Verificar se est√° no diret√≥rio correto
if [ ! -f "docker-compose.prod.yml" ]; then
    error "docker-compose.prod.yml n√£o encontrado. Execute este script no diret√≥rio raiz do projeto."
    exit 1
fi

# Verificar se Docker e Docker Compose est√£o instalados
if ! command -v docker &> /dev/null; then
    error "Docker n√£o est√° instalado. Por favor, instale o Docker primeiro."
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    error "Docker Compose n√£o est√° instalado. Por favor, instale o Docker Compose primeiro."
    exit 1
fi

# Verificar se arquivo .env existe
if [ ! -f "server/.env" ]; then
    warn "Arquivo .env n√£o encontrado. Criando a partir do .env.example..."
    cp server/.env.example server/.env
    warn "‚ö†Ô∏è  IMPORTANTE: Configure as vari√°veis de ambiente em server/.env antes de continuar!"
    read -p "Pressione Enter para continuar ap√≥s configurar o .env..."
fi

# Menu de op√ß√µes
echo -e "${BLUE}"
echo "========================================"
echo "       FocoVest Deploy Script"
echo "========================================"
echo -e "${NC}"

echo "Escolha uma op√ß√£o:"
echo "1. Deploy completo (primeira vez)"
echo "2. Atualizar aplica√ß√£o"
echo "3. Ver logs"
echo "4. Parar aplica√ß√£o"
echo "5. Restart aplica√ß√£o"
echo "6. Limpar containers e volumes"
echo "7. Backup dos dados"
echo "8. Health check"
echo "9. Ver m√©tricas"
echo "0. Sair"

read -p "Digite sua op√ß√£o (0-9): " option

case $option in
    1)
        log "Iniciando deploy completo..."
        
        # Verificar configura√ß√µes
        log "Verificando configura√ß√µes..."
        if grep -q "sua_chave_jwt_super_secreta" server/.env; then
            error "JWT_SECRET ainda est√° com valor padr√£o. Configure uma chave segura!"
            exit 1
        fi
        
        # Build das imagens
        log "Fazendo build das imagens Docker..."
        docker-compose -f docker-compose.prod.yml build --no-cache
        
        # Criar rede se n√£o existir
        docker network create focovest-network 2>/dev/null || true
        
        # Iniciar servi√ßos
        log "Iniciando servi√ßos..."
        docker-compose -f docker-compose.prod.yml up -d
        
        # Aguardar inicializa√ß√£o
        log "Aguardando inicializa√ß√£o dos servi√ßos..."
        sleep 30
        
        # Health check
        if curl -f http://localhost/api/health &>/dev/null; then
            log "‚úÖ Deploy realizado com sucesso!"
            log "üåê Aplica√ß√£o dispon√≠vel em: http://localhost"
            log "üìä M√©tricas: http://localhost/api/metrics"
        else
            error "‚ùå Falha no health check. Verifique os logs."
            docker-compose -f docker-compose.prod.yml logs --tail=50
        fi
        ;;
        
    2)
        log "Atualizando aplica√ß√£o..."
        
        # Rebuild apenas da aplica√ß√£o
        docker-compose -f docker-compose.prod.yml build focovest
        
        # Rolling update
        docker-compose -f docker-compose.prod.yml up -d focovest
        
        log "‚úÖ Aplica√ß√£o atualizada!"
        ;;
        
    3)
        log "Exibindo logs..."
        echo "Escolha o servi√ßo:"
        echo "1. Todos"
        echo "2. FocoVest App"
        echo "3. Nginx"
        read -p "Op√ß√£o: " log_option
        
        case $log_option in
            1) docker-compose -f docker-compose.prod.yml logs -f ;;
            2) docker-compose -f docker-compose.prod.yml logs -f focovest ;;
            3) docker-compose -f docker-compose.prod.yml logs -f nginx ;;
            *) docker-compose -f docker-compose.prod.yml logs -f ;;
        esac
        ;;
        
    4)
        log "Parando aplica√ß√£o..."
        docker-compose -f docker-compose.prod.yml down
        log "‚úÖ Aplica√ß√£o parada!"
        ;;
        
    5)
        log "Reiniciando aplica√ß√£o..."
        docker-compose -f docker-compose.prod.yml restart
        log "‚úÖ Aplica√ß√£o reiniciada!"
        ;;
        
    6)
        warn "‚ö†Ô∏è  Esta opera√ß√£o ir√° remover todos os containers e volumes!"
        read -p "Tem certeza? (y/N): " confirm
        if [[ $confirm == [yY] ]]; then
            log "Parando e removendo containers..."
            docker-compose -f docker-compose.prod.yml down -v --remove-orphans
            
            log "Removendo imagens n√£o utilizadas..."
            docker image prune -f
            
            log "‚úÖ Limpeza conclu√≠da!"
        else
            log "Opera√ß√£o cancelada."
        fi
        ;;
        
    7)
        log "Criando backup dos dados..."
        backup_dir="backups/$(date +'%Y%m%d_%H%M%S')"
        mkdir -p "$backup_dir"
        
        # Backup de volumes Docker (se existirem)
        if docker volume ls | grep focovest &>/dev/null; then
            docker run --rm -v focovest_mongodb-data:/data -v $(pwd)/$backup_dir:/backup alpine tar czf /backup/mongodb-data.tar.gz -C /data .
            log "Backup do MongoDB criado em: $backup_dir/mongodb-data.tar.gz"
        fi
        
        # Backup de logs
        if [ -d "logs" ]; then
            tar czf "$backup_dir/logs.tar.gz" logs/
            log "Backup dos logs criado em: $backup_dir/logs.tar.gz"
        fi
        
        # Backup de configura√ß√µes
        tar czf "$backup_dir/config.tar.gz" server/.env nginx/ docker-compose.prod.yml
        log "Backup das configura√ß√µes criado em: $backup_dir/config.tar.gz"
        
        log "‚úÖ Backup completo em: $backup_dir"
        ;;
        
    8)
        log "Executando health check..."
        
        # Verificar se containers est√£o rodando
        if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
            log "‚úÖ Containers est√£o rodando"
        else
            error "‚ùå Alguns containers n√£o est√£o rodando"
            docker-compose -f docker-compose.prod.yml ps
        fi
        
        # Verificar API
        if curl -f http://localhost/api/health &>/dev/null; then
            log "‚úÖ API est√° respondendo"
            
            # Mostrar informa√ß√µes do health check
            echo "Health Check Response:"
            curl -s http://localhost/api/health | python3 -m json.tool 2>/dev/null || curl -s http://localhost/api/health
        else
            error "‚ùå API n√£o est√° respondendo"
        fi
        ;;
        
    9)
        log "Obtendo m√©tricas do sistema..."
        
        if curl -f http://localhost/api/metrics &>/dev/null; then
            echo "M√©tricas do Sistema:"
            curl -s http://localhost/api/metrics | python3 -m json.tool 2>/dev/null || curl -s http://localhost/api/metrics
        else
            warn "M√©tricas n√£o dispon√≠veis. Verifique se a aplica√ß√£o est√° rodando."
        fi
        ;;
        
    0)
        log "Saindo..."
        exit 0
        ;;
        
    *)
        error "Op√ß√£o inv√°lida!"
        exit 1
        ;;
esac