version: '3.8'

services:
  # Aplicação FocoVest
  focovest:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: focovest-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - HOST=0.0.0.0
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      - FRONTEND_URL=${FRONTEND_URL:-https://app.focovest.com}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      # Rate limiting
      - RATE_LIMIT_GENERAL_MAX=${RATE_LIMIT_GENERAL_MAX:-100}
      - RATE_LIMIT_GENERAL_WINDOW=${RATE_LIMIT_GENERAL_WINDOW:-15}
      - RATE_LIMIT_AUTH_MAX=${RATE_LIMIT_AUTH_MAX:-5}
      - RATE_LIMIT_AUTH_WINDOW=${RATE_LIMIT_AUTH_WINDOW:-15}
      - RATE_LIMIT_REGISTER_MAX=${RATE_LIMIT_REGISTER_MAX:-3}
      - RATE_LIMIT_REGISTER_WINDOW=${RATE_LIMIT_REGISTER_WINDOW:-60}
      - RATE_LIMIT_SIMULATION_MAX=${RATE_LIMIT_SIMULATION_MAX:-50}
      - RATE_LIMIT_SIMULATION_WINDOW=${RATE_LIMIT_SIMULATION_WINDOW:-15}
      # Security
      - CORS_CREDENTIALS=${CORS_CREDENTIALS:-true}
      - CORS_MAX_AGE=${CORS_MAX_AGE:-86400}
      - BCRYPT_SALT_ROUNDS=${BCRYPT_SALT_ROUNDS:-12}
      - ADMIN_METRICS_TOKEN=${ADMIN_METRICS_TOKEN}
      # Features
      - ENABLE_REGISTRATION=${ENABLE_REGISTRATION:-true}
      - ENABLE_EMAIL_VERIFICATION=${ENABLE_EMAIL_VERIFICATION:-false}
      - ENABLE_PASSWORD_RESET=${ENABLE_PASSWORD_RESET:-true}
      # Monitoring
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      # Logs persistence (opcional)
      - ./logs:/app/logs:rw
    networks:
      - focovest-network
    labels:
      - "com.focovest.service=app"
      - "com.focovest.environment=production"
    depends_on:
      - nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx como proxy reverso e servidor de arquivos estáticos
  nginx:
    image: nginx:alpine
    container_name: focovest-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./ssl-certificates:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx:rw
    networks:
      - focovest-network
    labels:
      - "com.focovest.service=proxy"
      - "com.focovest.environment=production"
    depends_on:
      - focovest

  # Redis para cache (opcional para futuras implementações)
  redis:
    image: redis:7-alpine
    container_name: focovest-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - focovest-network
    labels:
      - "com.focovest.service=cache"
      - "com.focovest.environment=production"
    profiles:
      - full # Usar apenas quando necessário

  # MongoDB (opcional para futuras implementações)
  mongodb:
    image: mongo:6
    container_name: focovest-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=focovest
    volumes:
      - mongodb-data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - focovest-network
    labels:
      - "com.focovest.service=database"
      - "com.focovest.environment=production"
    profiles:
      - full # Usar apenas quando necessário

volumes:
  redis-data:
    driver: local
  mongodb-data:
    driver: local

networks:
  focovest-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16