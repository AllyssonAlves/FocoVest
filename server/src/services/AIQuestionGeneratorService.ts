// Define MockQuestion interface for compatibility
interface MockQuestion {
  id: number
  text: string
  options: string[]
  correctAnswer: number
  subject: string
  topic: string
  difficulty: 'easy' | 'medium' | 'hard'
  university: 'UFC' | 'UECE' | 'UVA' | 'URCA' | 'ENEM'
}

// Interfaces para gera√ß√£o de quest√µes
interface UniversityExamPattern {
  university: 'UFC' | 'UECE' | 'UVA' | 'URCA' | 'ENEM'
  subjects: string[]
  questionStyle: 'objective' | 'discursive' | 'mixed'
  difficultyDistribution: {
    easy: number
    medium: number
    hard: number
  }
  commonTopics: string[]
  examCharacteristics: {
    averageQuestionLength: number
    contextualQuestions: boolean
    interdisciplinaryQuestions: boolean
    currentEventsIntegration: boolean
  }
}

interface QuestionTemplate {
  id: string
  university: string
  subject: string
  topic: string
  difficulty: 'easy' | 'medium' | 'hard'
  template: string
  variables: Record<string, string[]>
  explanation: string
  tags: string[]
}

interface GeneratedQuestion {
  question: string
  alternatives: string[]
  correctAnswer: number
  explanation: string
  subject: string
  topic: string
  difficulty: 'easy' | 'medium' | 'hard'
  university: string
  confidence: number
  generationMethod: 'template' | 'ai_pattern' | 'hybrid'
}

export class AIQuestionGeneratorService {
  private readonly UNIVERSITY_PATTERNS: Record<string, UniversityExamPattern> = {
    UFC: {
      university: 'UFC',
      subjects: ['Matem√°tica', 'F√≠sica', 'Qu√≠mica', 'Biologia', 'Hist√≥ria', 'Geografia', 'Portugu√™s', 'Literatura'],
      questionStyle: 'objective',
      difficultyDistribution: { easy: 0.3, medium: 0.5, hard: 0.2 },
      commonTopics: [
        'Fun√ß√£o Quadr√°tica', 'Trigonometria', 'Mec√¢nica', 'Eletromagnetismo',
        'Qu√≠mica Org√¢nica', 'Gen√©tica', 'Brasil Rep√∫blica', 'Interpreta√ß√£o de Texto'
      ],
      examCharacteristics: {
        averageQuestionLength: 150,
        contextualQuestions: true,
        interdisciplinaryQuestions: true,
        currentEventsIntegration: false
      }
    },
    UECE: {
      university: 'UECE',
      subjects: ['Matem√°tica', 'F√≠sica', 'Qu√≠mica', 'Biologia', 'Hist√≥ria', 'Geografia', 'Portugu√™s'],
      questionStyle: 'objective',
      difficultyDistribution: { easy: 0.25, medium: 0.55, hard: 0.2 },
      commonTopics: [
        'An√°lise Combinat√≥ria', 'Geometria Anal√≠tica', 'Termodin√¢mica', 
        'Solu√ß√µes', 'Ecologia', 'Cear√° Colonial', 'Reda√ß√£o'
      ],
      examCharacteristics: {
        averageQuestionLength: 120,
        contextualQuestions: true,
        interdisciplinaryQuestions: false,
        currentEventsIntegration: true
      }
    },
    UVA: {
      university: 'UVA',
      subjects: ['Matem√°tica', 'F√≠sica', 'Qu√≠mica', 'Biologia', 'Hist√≥ria', 'Portugu√™s', 'Ingl√™s'],
      questionStyle: 'mixed',
      difficultyDistribution: { easy: 0.4, medium: 0.4, hard: 0.2 },
      commonTopics: [
        'Logaritmos', 'Estat√≠stica', 'Ondas', '√Åcidos e Bases',
        'Citologia', 'Hist√≥ria Regional', 'Gram√°tica'
      ],
      examCharacteristics: {
        averageQuestionLength: 100,
        contextualQuestions: false,
        interdisciplinaryQuestions: false,
        currentEventsIntegration: false
      }
    },
    URCA: {
      university: 'URCA',
      subjects: ['Matem√°tica', 'F√≠sica', 'Qu√≠mica', 'Biologia', 'Hist√≥ria', 'Geografia', 'Portugu√™s'],
      questionStyle: 'objective',
      difficultyDistribution: { easy: 0.35, medium: 0.45, hard: 0.2 },
      commonTopics: [
        'Geometria Plana', 'Cinem√°tica', 'Qu√≠mica Inorg√¢nica',
        'Bot√¢nica', 'Cariri na Hist√≥ria', 'Sintaxe'
      ],
      examCharacteristics: {
        averageQuestionLength: 110,
        contextualQuestions: true,
        interdisciplinaryQuestions: false,
        currentEventsIntegration: true
      }
    },
    ENEM: {
      university: 'ENEM',
      subjects: ['Matem√°tica', 'Ci√™ncias da Natureza', 'Ci√™ncias Humanas', 'Linguagens', 'Reda√ß√£o'],
      questionStyle: 'objective',
      difficultyDistribution: { easy: 0.3, medium: 0.5, hard: 0.2 },
      commonTopics: [
        'Matem√°tica Financeira', 'Estat√≠stica', 'Meio Ambiente', 'Direitos Humanos',
        'Tecnologia', 'Globaliza√ß√£o', 'Interpreta√ß√£o de Texto', 'G√™neros Textuais'
      ],
      examCharacteristics: {
        averageQuestionLength: 200,
        contextualQuestions: true,
        interdisciplinaryQuestions: true,
        currentEventsIntegration: true
      }
    }
  }

  private readonly QUESTION_TEMPLATES: QuestionTemplate[] = [
    {
      id: 'math_func_quad_001',
      university: 'UFC',
      subject: 'Matem√°tica',
      topic: 'Fun√ß√£o Quadr√°tica',
      difficulty: 'medium',
      template: 'Considere a fun√ß√£o f(x) = {coef_a}x¬≤ + {coef_b}x + {coef_c}. O valor de x para o qual f(x) √© {extremo} √©:',
      variables: {
        coef_a: ['2', '3', '-1', '-2', '4'],
        coef_b: ['-4', '6', '-8', '10', '0'],
        coef_c: ['1', '-3', '5', '-7', '2'],
        extremo: ['m√≠nimo', 'm√°ximo']
      },
      explanation: 'Para encontrar o extremo de uma fun√ß√£o quadr√°tica, usamos x = -b/2a.',
      tags: ['fun√ß√£o', 'extremo', 'v√©rtice', 'parabola']
    },
    {
      id: 'phys_cinem_001',
      university: 'UECE',
      subject: 'F√≠sica',
      topic: 'Cinem√°tica',
      difficulty: 'easy',
      template: 'Um corpo se move com velocidade constante de {velocidade} m/s. Em {tempo} segundos, ele percorrer√° uma dist√¢ncia de:',
      variables: {
        velocidade: ['10', '15', '20', '25', '30'],
        tempo: ['5', '8', '10', '12', '15']
      },
      explanation: 'Em movimento uniforme, a dist√¢ncia √© calculada por: d = v √ó t',
      tags: ['movimento uniforme', 'velocidade', 'tempo', 'dist√¢ncia']
    },
    {
      id: 'chem_stoic_001',
      university: 'UVA',
      subject: 'Qu√≠mica',
      topic: 'Estequiometria',
      difficulty: 'medium',
      template: 'Na rea√ß√£o {reacao}, quando {qtd_reagente} mol de {reagente} reage completamente, produz quantos mols de {produto}?',
      variables: {
        reacao: ['2H‚ÇÇ + O‚ÇÇ ‚Üí 2H‚ÇÇO', 'N‚ÇÇ + 3H‚ÇÇ ‚Üí 2NH‚ÇÉ', 'CaCO‚ÇÉ ‚Üí CaO + CO‚ÇÇ'],
        qtd_reagente: ['1', '2', '0.5', '3', '1.5'],
        reagente: ['H‚ÇÇ', 'N‚ÇÇ', 'CaCO‚ÇÉ'],
        produto: ['H‚ÇÇO', 'NH‚ÇÉ', 'CO‚ÇÇ']
      },
      explanation: 'Use os coeficientes estequiom√©tricos para relacionar quantidades de reagentes e produtos.',
      tags: ['estequiometria', 'mol', 'rea√ß√£o qu√≠mica', 'propor√ß√£o']
    },
    {
      id: 'bio_genetic_001',
      university: 'URCA',
      subject: 'Biologia',
      topic: 'Gen√©tica',
      difficulty: 'hard',
      template: 'Em um cruzamento entre indiv√≠duos heterozigotos ({genotype}), a probabilidade de obter descendentes com fen√≥tipo {phenotype} √©:',
      variables: {
        genotype: ['Aa', 'Bb', 'Cc', 'Dd'],
        phenotype: ['dominante', 'recessivo']
      },
      explanation: 'Em cruzamentos Aa x Aa, a propor√ß√£o √© 1:2:1 (AA:Aa:aa), resultando em 3:1 fenotipicamente.',
      tags: ['gen√©tica', 'heterozigoto', 'cruzamento', 'probabilidade']
    },
    {
      id: 'port_interp_001',
      university: 'ENEM',
      subject: 'Portugu√™s',
      topic: 'Interpreta√ß√£o de Texto',
      difficulty: 'medium',
      template: 'Leia o texto: "{texto}". A ideia principal do texto √© que:',
      variables: {
        texto: [
          'A tecnologia tem transformado a forma como nos comunicamos, mas tamb√©m criou novos desafios sociais.',
          'O meio ambiente sofre constantemente com a√ß√µes humanas, exigindo medidas urgentes de preserva√ß√£o.',
          'A educa√ß√£o √© fundamental para o desenvolvimento de uma sociedade mais justa e igualit√°ria.'
        ]
      },
      explanation: 'Para identificar a ideia principal, procure o tema central que perpassa todo o texto.',
      tags: ['interpreta√ß√£o', 'ideia principal', 'compreens√£o', 'texto']
    }
  ]

  // An√°lise de padr√µes das quest√µes existentes
  async analyzeExistingQuestions(): Promise<{
    subjectDistribution: Record<string, number>
    difficultyDistribution: Record<string, number>
    topicFrequency: Record<string, number>
    averageAlternatives: number
  }> {
    console.log('üìä AI: Analisando padr√µes das quest√µes existentes...')
    
    // Simular an√°lise de base de dados de quest√µes
    const analysis = {
      subjectDistribution: {
        'Matem√°tica': 0.25,
        'F√≠sica': 0.15,
        'Qu√≠mica': 0.15,
        'Biologia': 0.15,
        'Portugu√™s': 0.15,
        'Hist√≥ria': 0.10,
        'Geografia': 0.05
      },
      difficultyDistribution: {
        'easy': 0.30,
        'medium': 0.50,
        'hard': 0.20
      },
      topicFrequency: {
        'Fun√ß√£o Quadr√°tica': 12,
        'Cinem√°tica': 10,
        'Estequiometria': 8,
        'Gen√©tica': 9,
        'Interpreta√ß√£o de Texto': 15,
        'Trigonometria': 7,
        'Eletromagnetismo': 6
      },
      averageAlternatives: 5
    }

    console.log('‚úÖ AI: An√°lise de padr√µes conclu√≠da')
    return analysis
  }

  // Gera√ß√£o de quest√£o baseada em template
  private generateFromTemplate(template: QuestionTemplate, university?: string): GeneratedQuestion {
    console.log('üé≤ AI: Gerando quest√£o do template:', template.id)
    
    let question = template.template
    const usedVariables: Record<string, string> = {}

    // Substituir vari√°veis no template
    for (const [key, values] of Object.entries(template.variables)) {
      const randomValue = values[Math.floor(Math.random() * values.length)]
      usedVariables[key] = randomValue
      question = question.replace(`{${key}}`, randomValue)
    }

    // Gerar alternativas baseadas no tipo de quest√£o
    const alternatives = this.generateAlternatives(template, usedVariables)
    const correctAnswer = Math.floor(Math.random() * alternatives.length)

    return {
      question,
      alternatives,
      correctAnswer,
      explanation: template.explanation,
      subject: template.subject,
      topic: template.topic,
      difficulty: template.difficulty,
      university: university || template.university,
      confidence: 0.85,
      generationMethod: 'template'
    }
  }

  // Gera√ß√£o de alternativas inteligentes
  private generateAlternatives(template: QuestionTemplate, variables: Record<string, string>): string[] {
    const alternatives: string[] = []
    
    switch (template.subject) {
      case 'Matem√°tica':
        alternatives.push('15', '20', '25', '30', '35')
        break
      case 'F√≠sica':
        alternatives.push('100 m', '150 m', '200 m', '250 m', '300 m')
        break
      case 'Qu√≠mica':
        alternatives.push('1 mol', '2 mol', '3 mol', '4 mol', '5 mol')
        break
      case 'Biologia':
        alternatives.push('25%', '50%', '75%', '100%', '0%')
        break
      case 'Portugu√™s':
        alternatives.push(
          'A tecnologia √© prejudicial',
          'A comunica√ß√£o mudou com a tecnologia',
          'Os desafios sociais s√£o inevit√°veis',
          'A tecnologia resolve todos os problemas',
          'A comunica√ß√£o √© dispens√°vel'
        )
        break
      default:
        alternatives.push('Alternativa A', 'Alternativa B', 'Alternativa C', 'Alternativa D', 'Alternativa E')
    }

    return alternatives
  }

  // Gera√ß√£o com padr√µes de IA
  async generateFromAIPattern(
    subject: string,
    topic: string,
    difficulty: 'easy' | 'medium' | 'hard',
    university?: string
  ): Promise<GeneratedQuestion> {
    console.log('üß† AI: Gerando quest√£o com padr√µes de IA para:', { subject, topic, difficulty, university })
    
    const universityPattern = university ? this.UNIVERSITY_PATTERNS[university] : this.UNIVERSITY_PATTERNS.UFC
    
    // Algoritmo simplificado de gera√ß√£o baseada em padr√µes
    const baseQuestion = await this.generateContextualQuestion(subject, topic, difficulty, universityPattern)
    
    return {
      ...baseQuestion,
      university: university || 'UFC',
      confidence: 0.75,
      generationMethod: 'ai_pattern'
    }
  }

  // Gera√ß√£o de quest√£o contextualizada
  private async generateContextualQuestion(
    subject: string,
    topic: string,
    difficulty: 'easy' | 'medium' | 'hard',
    pattern: UniversityExamPattern
  ): Promise<Omit<GeneratedQuestion, 'university' | 'confidence' | 'generationMethod'>> {
    
    const contexts: { [key: string]: string[] } = {
      'Matem√°tica': [
        'Uma empresa precisa calcular...',
        'Um estudante est√° analisando dados...',
        'Em uma pesquisa cient√≠fica...',
        'Durante um projeto de constru√ß√£o...'
      ],
      'F√≠sica': [
        'Um experimento de laborat√≥rio...',
        'Na an√°lise de um fen√¥meno natural...',
        'Durante um estudo sobre movimento...',
        'Em uma aplica√ß√£o tecnol√≥gica...'
      ],
      'Qu√≠mica': [
        'Em um processo industrial...',
        'Durante uma rea√ß√£o em laborat√≥rio...',
        'Na an√°lise de uma subst√¢ncia...',
        'Em um estudo sobre materiais...'
      ]
    }

    const context = contexts[subject]?.[Math.floor(Math.random() * contexts[subject].length)] || 'Em um contexto acad√™mico...'
    
    return {
      question: `${context} relacionado a ${topic}. ${this.generateSpecificQuestion(subject, topic, difficulty)}`,
      alternatives: this.generateSmartAlternatives(subject, topic, difficulty),
      correctAnswer: Math.floor(Math.random() * 5),
      explanation: `Esta quest√£o aborda conceitos fundamentais de ${topic} em ${subject}.`,
      subject,
      topic,
      difficulty
    }
  }

  // Gera√ß√£o de quest√£o espec√≠fica por mat√©ria
  private generateSpecificQuestion(subject: string, topic: string, difficulty: 'easy' | 'medium' | 'hard'): string {
    const templates: { [key: string]: { [key: string]: string } } = {
      'Matem√°tica': {
        'Fun√ß√£o Quadr√°tica': 'Qual √© o v√©rtice da par√°bola representada pela fun√ß√£o?',
        'Trigonometria': 'Calcule o valor da express√£o trigonom√©trica.',
        'Logaritmos': 'Determine o valor do logaritmo.'
      },
      'F√≠sica': {
        'Cinem√°tica': 'Calcule a velocidade final do objeto.',
        'Din√¢mica': 'Determine a for√ßa resultante no sistema.',
        'Eletromagnetismo': 'Calcule o campo el√©trico na regi√£o.'
      },
      'Qu√≠mica': {
        'Estequiometria': 'Quantos mols de produto s√£o formados?',
        'Equil√≠brio Qu√≠mico': 'Calcule a constante de equil√≠brio.',
        'Qu√≠mica Org√¢nica': 'Identifique o composto org√¢nico.'
      }
    }

    return templates[subject]?.[topic] || `Analise o problema relacionado a ${topic}.`
  }

  // Gera√ß√£o inteligente de alternativas
  private generateSmartAlternatives(subject: string, topic: string, difficulty: 'easy' | 'medium' | 'hard'): string[] {
    const baseAlternatives = ['A', 'B', 'C', 'D', 'E']
    
    // Personalizar baseado no contexto
    switch (subject) {
      case 'Matem√°tica':
        return ['12', '18', '24', '30', '36']
      case 'F√≠sica':
        return ['5 m/s', '10 m/s', '15 m/s', '20 m/s', '25 m/s']
      case 'Qu√≠mica':
        return ['0,5 mol', '1,0 mol', '1,5 mol', '2,0 mol', '2,5 mol']
      default:
        return baseAlternatives
    }
  }

  // M√©todo principal de gera√ß√£o
  async generateQuestion(
    subject: string,
    topic?: string,
    difficulty?: 'easy' | 'medium' | 'hard',
    university?: string,
    method: 'template' | 'ai_pattern' | 'hybrid' = 'hybrid'
  ): Promise<GeneratedQuestion> {
    console.log('üéØ AI: Gerando nova quest√£o:', { subject, topic, difficulty, university, method })
    
    const finalDifficulty = difficulty || this.selectRandomDifficulty(university)
    const finalTopic = topic || this.selectRandomTopic(subject, university)

    let question: GeneratedQuestion

    switch (method) {
      case 'template':
        const template = this.selectTemplate(subject, finalTopic, university)
        question = this.generateFromTemplate(template, university)
        break
      
      case 'ai_pattern':
        question = await this.generateFromAIPattern(subject, finalTopic, finalDifficulty, university)
        break
      
      case 'hybrid':
      default:
        // Decidir aleatoriamente entre template e IA
        if (Math.random() > 0.5 && this.hasTemplate(subject, finalTopic)) {
          const template = this.selectTemplate(subject, finalTopic, university)
          question = this.generateFromTemplate(template, university)
        } else {
          question = await this.generateFromAIPattern(subject, finalTopic, finalDifficulty, university)
        }
        break
    }

    console.log('‚úÖ AI: Quest√£o gerada com sucesso:', {
      subject: question.subject,
      topic: question.topic,
      confidence: question.confidence,
      method: question.generationMethod
    })

    return question
  }

  // M√©todos auxiliares
  private selectRandomDifficulty(university?: string): 'easy' | 'medium' | 'hard' {
    const pattern = university ? this.UNIVERSITY_PATTERNS[university] : this.UNIVERSITY_PATTERNS.UFC
    const rand = Math.random()
    
    if (rand < pattern.difficultyDistribution.easy) return 'easy'
    if (rand < pattern.difficultyDistribution.easy + pattern.difficultyDistribution.medium) return 'medium'
    return 'hard'
  }

  private selectRandomTopic(subject: string, university?: string): string {
    const pattern = university ? this.UNIVERSITY_PATTERNS[university] : this.UNIVERSITY_PATTERNS.UFC
    const subjectTopics = pattern.commonTopics.filter(topic => 
      this.getTopicSubject(topic) === subject
    )
    
    return subjectTopics[Math.floor(Math.random() * subjectTopics.length)] || 'T√≥pico Geral'
  }

  private getTopicSubject(topic: string): string {
    const topicMap: Record<string, string> = {
      'Fun√ß√£o Quadr√°tica': 'Matem√°tica',
      'Trigonometria': 'Matem√°tica',
      'Logaritmos': 'Matem√°tica',
      'Cinem√°tica': 'F√≠sica',
      'Eletromagnetismo': 'F√≠sica',
      'Estequiometria': 'Qu√≠mica',
      'Gen√©tica': 'Biologia',
      'Interpreta√ß√£o de Texto': 'Portugu√™s'
    }
    
    return topicMap[topic] || 'Matem√°tica'
  }

  private hasTemplate(subject: string, topic: string): boolean {
    return this.QUESTION_TEMPLATES.some(t => t.subject === subject && t.topic === topic)
  }

  private selectTemplate(subject: string, topic: string, university?: string): QuestionTemplate {
    const candidates = this.QUESTION_TEMPLATES.filter(t => 
      t.subject === subject && 
      (t.topic === topic || !topic) &&
      (!university || t.university === university)
    )
    
    return candidates[Math.floor(Math.random() * candidates.length)] || this.QUESTION_TEMPLATES[0]
  }

  // Gera√ß√£o em lote
  async generateQuestionBatch(
    count: number,
    criteria: {
      subjects?: string[]
      difficulties?: ('easy' | 'medium' | 'hard')[]
      universities?: string[]
    } = {}
  ): Promise<GeneratedQuestion[]> {
    console.log('üì¶ AI: Gerando lote de quest√µes:', { count, criteria })
    
    const questions: GeneratedQuestion[] = []
    const subjects = criteria.subjects || ['Matem√°tica', 'F√≠sica', 'Qu√≠mica', 'Biologia', 'Portugu√™s']
    const difficulties = criteria.difficulties || ['easy', 'medium', 'hard']
    const universities = criteria.universities || ['UFC', 'UECE', 'UVA', 'URCA']

    for (let i = 0; i < count; i++) {
      const subject = subjects[Math.floor(Math.random() * subjects.length)]
      const difficulty = difficulties[Math.floor(Math.random() * difficulties.length)]
      const university = universities[Math.floor(Math.random() * universities.length)]
      
      try {
        const question = await this.generateQuestion(subject, undefined, difficulty, university)
        questions.push(question)
      } catch (error) {
        console.error('‚ùå Erro ao gerar quest√£o:', error)
      }
    }

    console.log('‚úÖ AI: Lote de quest√µes gerado:', questions.length, 'quest√µes')
    return questions
  }
}

// Singleton instance
export const aiQuestionGenerator = new AIQuestionGeneratorService()